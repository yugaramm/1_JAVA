상속(inheritance)
	1. 기존에 선언된 클래스의 필드를 새롭게 만들 클래스의 필드로 사용하고자 할 때
	2. 여러 클래스 선언 시 필드가 겹치는 경우, 부모 클래스를 먼저 선언하고 공통 필드로 묶어서 자식 클래스들에게 상속해준다.

상속 문법
	class A {
		A필드
	}

	class B extends A{
		(A), B필드
	}

자식 클래스의 객체화
	자식 클래스로 객체를 만들 때 자식 생성자가 호출이 된다.
	단, 항상 부모 생성자가 먼저 호출이 되어, 부모 클래스의 정보가 메모리에 먼저 올라가야한다.
	부모 클래스의 정보를 메모리에 올리는 역할을 하는 것이 부모 생성자이다.
	부모 클래스에 기본 생성자가 정의되어 있다면, 알아서 자식 생성자 내에 생략되어 들어가있다.
	하지만, 부모 클래스에 기본 생성자가 정의되어있지 않다면 자식 생성자를 정의할 때 가장 먼저
	정의 되어있는 부모 생성자를 작성해주어야한다.

다형성
	1.오버로딩
	2.오버라이딩(재정의)
		부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자 할 때 재정의를 해야한다.
		이는 자식에서 부모 필드의 메소드와 동일한 이름으로 선언하는 것이다.
		부모 필드가 메모리에 먼저 할당되고 test라는 메소드가 먼저 올라간다고 하면,
		자식 필드가 메모리에 할당되면서 재정의한 test 메소드가 새롭게 만들어지는 것이 아니라
		기존에 할당된 test 메소드 저장공간에 새롭게 재정의한 자식 필드의 소스코드 주소가 들어가게 된다.
		따라서 자식 객체로 test 메소드에 접근하면 자식 필드에서 재정의한 소스코드의 내용이 실행된다.


실습
	class Animal{
		String name
		int age
		String species

		void printInfo(){
			원하는 모양
		}

	class SickAnimal <- Animal 클래스 상속
		String disease;

		void printInfo(){
			병명도 같이 나오게
		}

		void cure(){
			누구의 병명이 잘 치유되었습니다
		}



Casting (모든 자식은! 부모 타입)
	up casting : 자식 값을 보모 타입으로 형변환
	down casting : up casting된 객체를 자식 타입으로 형변환
	※ 부모 값을 자식 타입으로 형변환 시 오류







