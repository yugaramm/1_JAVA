내부 클래스(Inner Class)
	하나의 클래스에서 a작업과 b작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
	클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며
	내부 클래스를 객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
	이를 은닉화라고 한다. 내부 클래스는 외부 클래스의 필드이기 때문에
	외부 클래스의 필드를 자신의 필드처럼 가져다 사용할 수 있게 된다.
	※ 메소드 안에서 클래스를 선언할 수 있다.

익명 클래스(Anonymous Inner Class)
	이름이 없는 클래스이며 구현되지 않는 필드를 구현하기 위해 일회성으로 생산되는 클래스이다.

함수형 인터페이스
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상 메소드만
	선언할 수 있도록 제한해야한다.

람다식(Lambda Expression)
	이름이 없는 메소드로서 변수처럼 사용이 가능하며, 매개변수로도 전달이 가능하다.
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 메소드 이름이 필요 없다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

====================================================================================

예외 처리
	에러 : 개발자가 컨트롤 할 수 없는 문제
	예외 : 개발자가 컨트롤 할 수 있는 자바 기능적인 문제

	try {
		예외가 발생할 수 있는 문장들
	}
	catch(예외이름(클래스) 객체명){
		해당 예외 발생 시 샐행할 문장
	}
	catch(예외이름(클래스) 객체명){
		해당 예외 발생 시 샐행할 문장
	}
	catch(예외이름(클래스) 객체명){
		해당 예외 발생 시 샐행할 문장
	}
	...
	finally {
		예외 발생 여부에 상관없이 무조건 실행할 문장
		※ 외부 장치와 연결 했을 경우 다시 닫을 때 주로 사용한다.
	}







