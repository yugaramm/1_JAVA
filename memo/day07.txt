객체지향 프로그래밍(Object Oriented Programming)
	추상화된 클래스로 구체적인 객체를 만들고 객체들 간 관계를 맺어 상호작용하는 프로그래밍 기법

클래스 - 공통요소를 한 번만 선언해 놓고 가져다 사용만 하도록 설계한다.
	1. 사용자 정의 타입이다. (자료형)
	- 클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
	- 클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야 한다.

클래스 선언
	class 클래스명 {
		int number;
		String name;
		int age;

		메소드;
		- 해당 멤버 변수에 대한 제어를 수행하고 싶을 때.
		- 공통된 메소드들을 묶어줄 때도 하나의 클래스 안에 메소드들을 정의한다.
	}

클래스의 필드 사용
	객체화(instance) : 객체를 만드는 작업, 추상적인 개념을 구체화 시키는 작업
		클래스명 객체명 = new 클래스명();
		객체명.필드명(변수, 메소드)

생성자
	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 기능이 똑같지만 메소드라고 부르지 않는다.
	생성자는 리턴이라는 기능이 존재하지 않는다. 이미 리턴되는 것이 정해져있기 때문.

	1. 해당 클래스의 필드를 메모리에 할당한 후 부여된 주소값을 가져온다.
	2. 멤버변수의 초기화

this
	필드에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
	이 때 접근한 객체가 가지고 있는 필드의 주소값을 this라는 변수에 자동으로 담긴다.

기본 생성자
	매개변수와 실행할 문장이 따로 없다.
	클래스 선언 시 자동으로 선언되며, 사용자가 직접 생성자를 선언하게 되면 기본 생성자는 없어진다.

다형성(polymorphism)
	1. 오버로딩 (Overloading)
		매개변수의 갯수 또는 타입이나 순서가 다르면 동일한 이름의 메소드로 선언할 수 있다.
	2. 오버라이딩


디지몬 게임

디지몬 클래스
	진화체 이름 배열 {"아구몬", "그레이몬", "메탈그레이몬", "워그레이몬"}
	이름, hp, exp, feedCount, rankNumber

기능
	악의 무리 무찌르기(전투) hp가 10이하라면 실행되지 못함
		대승리 exp + 20 대승리할 확률은 55%
		전투에서 승리 exp + 10, hp -10 

	잠자기
		exp - 5
		hp + 10

	먹기
		feedCount--;
		hp + 10

	진화하기
		exp 100 찼다면, 진화할 수 있음
		hp 최대치 회복, exp 0, rankNumber++

	최후의 전투
		3 -> 80%
		2 -> 60%
		1 -> 40%
		0 -> 20%
		이기면 게임 종료
		지면 처음으로 되돌리기










