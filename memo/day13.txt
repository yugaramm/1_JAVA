throws : 예외 던지기
	메소드에서 발생할 수 있는 예외를 메소드 선언부에서 처리하지 않고
	사용하는 부분까지 던져서 처리하도록 하는 것.
	상황에 맞게 개발자가 예외 처리를 하기 위해 존재한다.

======================================================================================

API (Application Programming Interface)
	개발에 필요한 라이브러리들의 집합
	선배 개발자들이 만들어 놓은 소스코드
	
	- 내부 API
		JDK 설치 시 제공해주는 기본 API

	- 외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR 파일로 배포하며 자바 프로젝트의 buildPath에 추가하여 사용할 수 있다.

JAR 파일로 배포하기
	배포할 클래스 또는 패키지 우클릭
	> Export > JAVA/JAR file 선택 > Next
	> 원하는 경로 선택 그리고 이름 입력 (destination)
	> Export Java Source Files ... 체크 (개발자가 만든 .java 파일을 확인가능)
	> Finish

JAR 파일을 프로젝트에 추가하기
	배포된 JAR파일을 다운 받기
	> 프로젝트 우클릭 > Build Path > Configure Build Path
	> Libraries > ClassPath (안되면 ModulePath) 클릭 > Add External JARs
	> 저장된 경로의 .jar 추가 > Apply > Apply and Close

======================================================================================

Object 클래스 (최상위 부모 클래스, 모든 클래스는 자동으로 Object를 상속 받는다.)

	1. toString()
		항상 객체명을 출력할 때에는 toString()이 생략되어있다.
		toString()을 통해 출력되는 문자열이 마음에 들지 않는다면, 재정의하여 수정하도록 한다.
		실무에서는 클래스 선언 시 각 필드의 초기화 여부를 확인하기 위해
		toString()을 재정의하여 사용한다.

	2. equals()
		주소값 비교(==)
		String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에
		문자열 비교는 무조건 equals() 로 한다.

	3. hashCode()
		JVM에서 관리하는 중복없는 값. 실제 메모리에 할당되는 주소와 다르다.

Constant Pool
	상수가 넘쳐나는 영역이라는 뜻
	문자열이나, 기본 자료형의 변수를 만들 때, 이미 있는 값을 또 만들지 않고
	Constant Pool 안에 있는 값의 주소를 넘겨준다.
	그렇기 때문에 == 이든, equals 든 true;

	new를 통해 객체를 만들어줬다면, 값이 같다하더라도 메모리에 각각 다른 주소가 할당되기에
	== 은 주소값 비교를 하면 false가 나온다.

Wrapper Class : 기본 자료형들의 클래스 타입
	클래스타입 객체 = new 클래스타입(일반타입의 값); // boxing, 옛날 문법
	클래스타입 객체 = 클래스타입.valueof(일반타입의 값); // boxing
	일반타입 변수 = 객체.000value(); // unboxing

	클래스타입 객체 = 일반타입의 값; // auto boxing
	일반타입 변수 = 객체; // auto unboxing


Wrapper Class를 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다.
	




