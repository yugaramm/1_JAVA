프로그램
	특정 작업을 수행하는 명령어들의 모음
	메모리를 할당받지 않은 상태

프로세스
	실행 중인 프로그램
	프로세스는 프로그램을 실행시키기 위한 자원과 쓰레드로 구성된다.

쓰레드
	하나의 프로세스 내에서 작업을 처리하는 흐름의 단위
	
싱글 쓰레드
	하나의 쓰레드가 작업을 마치면 프로그램이 종료된다.
	쓰레드를 하나만 가지고 있기 때문에 작업을 순차적으로 처리하므로 상대적으로 비효율적이다.
	쓰레드는 자원을 사용하는데 싱글 쓰레드는 혼자서 자원을 사용하므로 동기화를 걱정할 필요가 없다.
	따라서 안정성이 높고 설계가 쉽다.

멀티 쓰레드
	메인 쓰레드가 작업을 마치더라도 다른 쓰레드의 작업이 모두 끝나야 프로그램이 종료된다.
	하나의 프로세스에서 여러 작업을 동시에 처리하는 것처럼 느껴지지만
	사실은 각각의 쓰레드를 빠른 속도로 번갈아가며 실행시켜서 조금씩 처리한다.
	쓰레드간 공유하는 자원이 있다면 충돌이 생겨 문제가 발생할 수 있으며 이런 문제를 
	동기화를 통해 해결한다.
	안전성이 떨어지고 설계가 굉장히 어렵다.

멀티 쓰레드 구현 방법
	1. Thread 클래스 상속
	2. Runnable 인터페이스 지정
		- run() 메소드에 쓰레드가 처리할 작업을 재정의한다.
		- start() 메소드로 쓰레드를 실행시킨다.

동기화(Synchronized)
	하나의 쓰레드가 자원에 접근 중일 때 다른 쓰레드가 동시에 같은 자원을 접근하지 못하게 막는 것
	즉, 자원 공유 문제를 해결할 수 있다.

동기화 문법
	- 블럭 : synchronized(mutex){...}
		동기화 블럭이라고 부르며, 일부 소스코드만 동기화를 걸어준다.

	- 키워드 : synchronized
		영역 전체에 동기화를 걸어주며, 메소드 리턴 타입 앞에 작성하면
		해당 메소드 전체에 동기화가 걸린다.

Thread 종료 방법
	1. System.exit(0) 을 사용하면 전체 쓰레드가 종료된다. (프로그램 종료)
	2. InterruptedException을 발생시킨다.
	쓰레드 객체의 interrupt() 를 사용하여 예외를 발생시켜 try~catch문으로 이동시킨다.
	예외처리를 했다고 강제 종료 되는 것이 아니므로, catch문에 쓰레드가 종료될 수 있는
	코드를 작성하여 처리할 수 있다.